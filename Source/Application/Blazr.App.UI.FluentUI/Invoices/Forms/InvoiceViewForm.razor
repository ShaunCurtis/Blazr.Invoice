@namespace Blazr.App.UI.FluentUI
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@implements IDialogContentComponent<InvoiceId>
@inject IToastService ToastService
@inject IReadPresenterFactory<DmoInvoice,InvoiceId> PresenterFactory

@if (_isDialog)
{
    <FluentDialogHeader Visible="false" />

    <FluentDialogBody>
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.DocumentBorder())" />
            <FluentLabel Typo="Typography.PaneHeader">
                Invoice View
            </FluentLabel>
        </FluentStack>

        <InvoiceViewer Invoice="this.Presenter.Item"/>

        <FluentStack VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Right">
            <FluentButton Appearance="Appearance.Neutral"
                          OnClick="@ExitAsync">
                Exit
            </FluentButton>
        </FluentStack>

        <FluentDialogFooter Visible="false" />

    </FluentDialogBody>

    return;
}

<InvoiceViewer Invoice="this.Presenter.Item" />

@code
{
    [CascadingParameter] private FluentDialog Dialog { get; set; } = default!;
    [CascadingParameter] private Invoice Composite { get; set; } = default!;
    [Parameter] public InvoiceId Content { get; set; } = new(Guid.Empty);

    private IReadPresenter<DmoInvoice, InvoiceId> Presenter = default!;
    private bool _isDialog => this.Dialog is not null;

    private bool _isNotInitialized = true;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        // Get the presenter
        if (_isNotInitialized)
        {
            this.Presenter = await this.PresenterFactory.GetPresenterAsync(this.Content);

            if (this.Composite is not null)
                this.Composite.StateHasChanged += this.OnCompositeStateChanged;

            _isNotInitialized = false;
        }

        await base.SetParametersAsync(ParameterView.Empty);
    }

    protected override void OnParametersSet()
    {
        this.CheckForToasts();
    }

    private void CheckForToasts()
    {
        if (!this.Presenter.LastResult.Successful)
            this.ToastService.ShowError(this.Presenter.LastResult.Message ?? "An Error occured retrieving the record.");
    }

    private void OnCompositeStateChanged(object? sender, InvoiceId id)
    {
        this.CheckForToasts();
        this.StateHasChanged();
    }

    private async Task ExitAsync()
    {
        await Dialog.CancelAsync();
    }

    public void Dispose()
    {
        if (this.Composite is not null)
            this.Composite.StateHasChanged -= this.OnCompositeStateChanged;
    }
}
