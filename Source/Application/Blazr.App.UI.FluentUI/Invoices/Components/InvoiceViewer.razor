@namespace Blazr.App.UI.FluentUI
@implements IDisposable
<FluentGrid Style="padding:1em;" Spacing="1" AdaptiveRendering="true">
    <FluentGridItem sm="12" md="6">
        <FluentTextField Style="width: 100%;"
                         Value="@_invoice.Id.Value.ToString()"
                         Label="Full Id"
                         ReadOnly />
    </FluentGridItem>
    <FluentGridItem sm="12" md="6">
        <FluentTextField Style="width: 100%;"
                         Value="@_invoice.CustomerName"
                         Label="Customer Name"
                         ReadOnly />
    </FluentGridItem>
    <FluentGridItem sm="12" md="6">
        <FluentTextField Style="width: 100%;"
                         Value="@_invoice.Date.ToString()"
                         Label="Invoice Date"
                         ReadOnly />
    </FluentGridItem>
    <FluentGridItem sm="12" md="6">
        <FluentTextField Style="width: 100%;"
                         Value="@_invoice.TotalAmount.ToString()"
                         Label="Invoice Amount"
                         ReadOnly />
    </FluentGridItem>
</FluentGrid>

@code {
    [CascadingParameter] private Invoice? Composite { get; set; }
    [Parameter] public DmoInvoice? Invoice { get; set; }

    private DmoInvoice _invoice = default!;

    protected override void OnInitialized()
    {
        if (this.Composite is null && this.Invoice is null)
            ArgumentNullException.ThrowIfNull(this.Composite);

        _invoice = this.Composite is not null
            ? this.Composite.InvoiceRecord
            : this.Invoice!;

        if (this.Composite is not null)
        {
            this.Composite.StateHasChanged += this.OnCompositeStateChanged;
            _invoice = this.Composite.InvoiceRecord;
            return;
        }

        _invoice = this.Invoice!;

    }

    private void OnCompositeStateChanged(object? sender, InvoiceId id)
    {
        // We need to reload the invoice from the composite
        _invoice = this.Composite!.InvoiceRecord;
        this.StateHasChanged();
    }

    public void Dispose()
    {
        if (this.Composite is not null)
            this.Composite.StateHasChanged -= this.OnCompositeStateChanged;
    }
}
