@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@namespace Blazr.App.UI.FluentUI
@implements IDialogContentComponent<CustomerId>
@inject IReadPresenterFactory PresenterFactory

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.ContentView())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <FluentGrid Spacing="1" AdaptiveRendering="true" >
        <FluentGridItem sm="12" md="6">
            <FluentTextField Style="width: 100%;"
                             Value="@this.Presenter.Item.Id.Value.ToString()"
                             Label="Full Id"
                             ReadOnly />
        </FluentGridItem>
        <FluentGridItem sm="12" md="6">
            <FluentTextField Style="width: 100%;"
                             Value="@this.Presenter.Item.CustomerName"
                             Label="Customer Name"
                             ReadOnly />
        </FluentGridItem>
    </FluentGrid>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  OnClick="@ExitAsync">
        Exit
    </FluentButton>
</FluentDialogFooter>

@code
{
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public CustomerId Content { get; set; } = default!;

    private IReadPresenter<DmoCustomer, CustomerId> Presenter = default!;
    private bool _isNotInitialized = true;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        // Get the presenter
        if (_isNotInitialized)
        {
            this.Presenter = await this.PresenterFactory.GetPresenterAsync<DmoCustomer, CustomerId>(this.Content);
            _isNotInitialized = false;
        }

        await base.SetParametersAsync(ParameterView.Empty);
    }

    private async Task ExitAsync()
    {
        await Dialog.CancelAsync();
    }
}
