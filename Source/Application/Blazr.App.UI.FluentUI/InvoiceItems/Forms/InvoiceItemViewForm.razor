@namespace Blazr.App.UI.FluentUI
@implements IDialogContentComponent<(InvoiceItemId Id, Invoice Invoice)>
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

@if (_isDialog)
{
    <FluentDialogHeader Visible="false" />

    <FluentDialogBody>

        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.DocumentBorder())" />
            <FluentLabel Typo="Typography.PaneHeader">
                Invoice Item View
            </FluentLabel>
        </FluentStack>

        <InvoiceItemViewer Item="_item" />

    </FluentDialogBody>

    <FluentStack VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Right">
        <FluentButton Appearance="Appearance.Neutral"
                      OnClick="@ExitAsync">
            Exit
        </FluentButton>
    </FluentStack>

    <FluentDialogFooter Visible="false" />

    return;
}

<InvoiceItemViewer Item="_item" />

@code {
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public (InvoiceItemId Id, Invoice Invoice) Content { get; set; } = default!;
    [CascadingParameter] private Invoice InvoiceAggregate { get; set; } = default!;

    private bool _isDialog => this.Dialog is not null;
    private DmoInvoiceItem _item = default!;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(this.Content);
        var invoice = this.InvoiceAggregate ?? this.Content.Invoice;

        var item = invoice.Dispatch(new InvoiceActions.GetInvoiceItemAction(this.Content.Id));
    }

    private async Task ExitAsync()
    {
        await Dialog.CancelAsync();
    }
}
