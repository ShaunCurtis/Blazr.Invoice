@namespace Blazr.App.UI

@inject InvoiceAggregatePresenterFactory PresenterFactory
@inject NavigationManager NavManager
@inject IToastService ToastService

@implements IDisposable

<PageTitle>Invoice Dashboard</PageTitle>

<BsModalDialog @ref=_modalDialog />

@code {
    [Parameter, EditorRequired] public InvoiceId InvoiceId { get; set; } = new(Guid.Empty);

    private InvoiceAggregatePresenter Presenter = default!;
    private bool _loading = true;
    private bool _isError = false;
    private IModalDialog _modalDialog = default!;

    private bool _isDirty 
        => this.Presenter.Invoice.IsDirty;
    
    private string _message 
        => _isError ? this.Presenter.LastResult.Message ?? "Unspecified Error" : "Invoice changes are not currently saved to the data store!";
    
    private Invoice _invoice 
        => this.Presenter.Invoice ?? Invoice.Default;

    protected async override Task OnInitializedAsync()
    {
        this.Presenter = await this.PresenterFactory.CreateAsync(this.InvoiceId);
        this.Presenter.Invoice.StateHasChanged += this.OnAggregateStateChanged;
        _loading = false;
    }

    private Task OnLocationChanging(LocationChangingContext context)
    {
        // Need to check if the invoice is dirty before letting the user exit
        if (_isDirty)
        {
            context.PreventNavigation();
            this.ToastService.ShowError("You can't navigate away from an unsaved invoice.  Choose Save or Exit Without Saving.");
        }

        return Task.CompletedTask;
    }

    private void OnAggregateStateChanged(object? sender, InvoiceId invoiceId)
    {
        this.StateHasChanged();
    }

    private async Task EditAsync()
    {
        // // Pop up the Editor dialog
        // var dialog = await DialogService.ShowDialogAsync<InvoiceEditForm>(_invoice, new DialogParameters()
        //     {
        //         Title = _invoice.State == CommandState.Add ? "Add Invoice" : "Edit Invoice",
        //         PreventDismissOnOverlayClick = true,
        //         PreventScroll = true,
        //     });

        // // Await the result when the dialog closes
        // var result = await dialog.Result;

        // // If we have a cancelled new invoice we need to exit back to the invoices page
        // if (result.Cancelled && _invoice.State == CommandState.Add)
        // {
        //     this.ToastService.ShowEvent("You exited creating the new invoice.");
        //     this.Presenter.FakePersistenceToAllowExit();
        //     this.NavManager.NavigateTo($"/invoices");
        // }
    }

    private async Task SaveAsync()
    {
        var result = await this.Presenter.SaveAsync();
        if (result.IsSuccess)
        {
            this.NavManager.NavigateTo($"/invoices");
            return;
        }
    }

    private Task ExitAsync()
    {
        // Normal exit.  Will be aborted by the Navigation Locker if the composite is dirty
        this.NavManager.NavigateTo($"/invoices");
        return Task.CompletedTask;
    }

    private Task ExitWithoutSavingAsync()
    {
        // We aren't saving the composite so we can update the state so we can exit
        this.Presenter.FakePersistenceToAllowExit();

        this.NavManager.NavigateTo($"/invoices");
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        this.Presenter.Invoice.StateHasChanged -= this.OnAggregateStateChanged;
    }
}